/* Interface */
#define function setValue(uint256) nonpayable returns ()
#define function getValue() view returns (uint256)

#define function isClaimed(uint256) view returns (bool)


/* Storage Slots */
#define constant VALUE_LOCATION = FREE_STORAGE_POINTER()

#define constant MERKLE_ROOT = FREE_STORAGE_POINTER()
#define constant TOKEN_ADDR = FREE_STORAGE_POINTER()

/* Methods */
#define macro SET_VALUE() = takes (0) returns (0) {
    0x04 calldataload   // [value]
    [VALUE_LOCATION]    // [ptr, value]
    sstore              // []
}

#define macro GET_VALUE() = takes (0) returns (0) {
    // Load value from storage.
    [VALUE_LOCATION]   // [ptr]
    sload                // [value]

    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}

/* Reserved Macros */
// constructor (address, merkleRoot)
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    0x04 calldataload       // load first 32 bytes onto the stack - merkle_root value
    [MERKLE_ROOT]           // [addr, value]
    sstore                  // []
    
    0x24 calldataload       // load second 32 bytes onto the stack
    [TOKEN_ADDR]            // [addr, value]
    sstore                  // []
}

#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 0x55241077 eq set jumpi
    dup1 0x20965255 eq get jumpi

    set:
        SET_VALUE()
    get:
        GET_VALUE()

}